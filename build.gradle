plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'org.sonarqube' version '4.2.1.3168'
}

group = 'br.com'
version = '1.0.0-POC'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	generatedMapperSourcesDir = "${buildDir}/generated-src/mapstruct/main"
	javaLanguageLevel = '17'
	mapstructVersion = "1.6.0.Beta1"
	lombokVersion = "1.18.30"
	lombokMapstructBindingVersion = "0.2.0"
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
	mapstruct
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.1.0'
	implementation 'com.mysql:mysql-connector-j'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	testImplementation 'org.hsqldb:hsqldb:2.7.1'
	implementation 'org.jacoco:org.jacoco.core:0.8.7'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.cucumber:cucumber-java:7.0.0'
	testImplementation 'io.cucumber:cucumber-spring:7.0.0'
	testImplementation 'io.cucumber:cucumber-junit:7.0.0'
}

sourceSets {
	main {
		ext.originalJavaSrcDirs = java.srcDirs
		java.srcDir "${generatedMapperSourcesDir}"
	}
}

tasks.register('generateMainMapperClasses', JavaCompile) {
	ext.aptDumpDir = file("${buildDir}/tmp/apt/mapstruct")
	destinationDir = aptDumpDir

	classpath = compileJava.classpath + configurations.mapstruct
	source = sourceSets.main.originalJavaSrcDirs
	ext.sourceDestDir = file("$generatedMapperSourcesDir")

	options.define(
			compilerArgs: [
					"-nowarn",
					"-proc:only",
					"-encoding", "UTF-8",
					"-processor", "org.mapstruct.ap.MappingProcessor",
					"-s", sourceDestDir.absolutePath,
					"-source", rootProject.javaLanguageLevel,
					"-target", rootProject.javaLanguageLevel,
			]
	);

	inputs.dir source
	outputs.dir generatedMapperSourcesDir;
	doFirst {
		sourceDestDir.mkdirs()
	}
	doLast {
		aptDumpDir.delete()
	}
}

tasks.register("cucumberCli") {
	dependsOn assemble, testClasses
	group = 'verification'
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = [
					'--plugin', 'pretty',
					'--plugin', 'html:build/reports/cucumber/cucumber-report.html',
					'src/test/resources']
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = '0.8.10'
}

jacocoTestReport {
	getExecutionData().setFrom(fileTree(buildDir).include('/jacoco/*.exec'))
	reports {
		csv.required.set(false)
		xml.required.set(true)
		xml.outputLocation.set(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
	}
	dependsOn test
}

test {
	finalizedBy jacocoTestReport
}

sonar {
	properties {
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'postech-lanchonete'
		property 'sonar.projectKey', 'postech-lanchonete_postech-produtos'
		property 'sonar.projectName', 'postech-produtos'
		property 'sonar.sources', 'src/main'
		property 'sonar.tests', 'src/test'
		property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/jacoco.xml'

		property 'sonar.projectVersion', '1.0'
		property 'sonar.language', 'java'
		property 'sonar.java.binaries', "${buildDir}/classes"
		property 'sonar.java.libraries', '**/*.jar'
		property 'sonar.java.source', '17'
		property 'sonar.core.codeCoveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.dynamicAnalysis', 'reuseReports'
	}
}